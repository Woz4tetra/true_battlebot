//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.ZedInterfaces
{
    [Serializable]
    public class ObjectMsg : Message
    {
        public const string k_RosMessageName = "zed_interfaces/Object";
        public override string RosMessageName => k_RosMessageName;

        //  Object label
        public string label;
        //  Object label ID
        public short label_id;
        //  Object sub
        public string sublabel;
        //  Object confidence level (1-99)
        public float confidence;
        //  Object centroid position
        public float[] position;
        //  Position covariance
        public float[] position_covariance;
        //  Object velocity
        public float[] velocity;
        //  Tracking available
        public bool tracking_available;
        //  Tracking state
        //  0 -> OFF (object not valid)
        //  1 -> OK
        //  2 -> SEARCHING (occlusion occurred, trajectory is estimated)
        public sbyte tracking_state;
        //  Action state
        //  0 -> IDLE
        //  2 -> MOVING
        public sbyte action_state;
        //  2D Bounding box projected to Camera image
        public BoundingBox2DiMsg bounding_box_2d;
        //  3D Bounding box in world frame
        public BoundingBox3DMsg bounding_box_3d;
        //  3D dimensions (width, height, lenght)
        public float[] dimensions_3d;
        //  Is skeleton available?
        public bool skeleton_available;
        //  2D Bounding box projected to Camera image of the person head
        public BoundingBox2DfMsg head_bounding_box_2d;
        //  3D Bounding box in world frame of the person head
        public BoundingBox3DMsg head_bounding_box_3d;
        //  3D position of the centroid of the person head
        public float[] head_position;
        //  2D Person skeleton projected to Camera image
        public Skeleton2DMsg skeleton_2d;
        //  3D Person skeleton in world frame
        public Skeleton3DMsg skeleton_3d;

        public ObjectMsg()
        {
            this.label = "";
            this.label_id = 0;
            this.sublabel = "";
            this.confidence = 0.0f;
            this.position = new float[3];
            this.position_covariance = new float[6];
            this.velocity = new float[3];
            this.tracking_available = false;
            this.tracking_state = 0;
            this.action_state = 0;
            this.bounding_box_2d = new BoundingBox2DiMsg();
            this.bounding_box_3d = new BoundingBox3DMsg();
            this.dimensions_3d = new float[3];
            this.skeleton_available = false;
            this.head_bounding_box_2d = new BoundingBox2DfMsg();
            this.head_bounding_box_3d = new BoundingBox3DMsg();
            this.head_position = new float[3];
            this.skeleton_2d = new Skeleton2DMsg();
            this.skeleton_3d = new Skeleton3DMsg();
        }

        public ObjectMsg(string label, short label_id, string sublabel, float confidence, float[] position, float[] position_covariance, float[] velocity, bool tracking_available, sbyte tracking_state, sbyte action_state, BoundingBox2DiMsg bounding_box_2d, BoundingBox3DMsg bounding_box_3d, float[] dimensions_3d, bool skeleton_available, BoundingBox2DfMsg head_bounding_box_2d, BoundingBox3DMsg head_bounding_box_3d, float[] head_position, Skeleton2DMsg skeleton_2d, Skeleton3DMsg skeleton_3d)
        {
            this.label = label;
            this.label_id = label_id;
            this.sublabel = sublabel;
            this.confidence = confidence;
            this.position = position;
            this.position_covariance = position_covariance;
            this.velocity = velocity;
            this.tracking_available = tracking_available;
            this.tracking_state = tracking_state;
            this.action_state = action_state;
            this.bounding_box_2d = bounding_box_2d;
            this.bounding_box_3d = bounding_box_3d;
            this.dimensions_3d = dimensions_3d;
            this.skeleton_available = skeleton_available;
            this.head_bounding_box_2d = head_bounding_box_2d;
            this.head_bounding_box_3d = head_bounding_box_3d;
            this.head_position = head_position;
            this.skeleton_2d = skeleton_2d;
            this.skeleton_3d = skeleton_3d;
        }

        public static ObjectMsg Deserialize(MessageDeserializer deserializer) => new ObjectMsg(deserializer);

        private ObjectMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.label);
            deserializer.Read(out this.label_id);
            deserializer.Read(out this.sublabel);
            deserializer.Read(out this.confidence);
            deserializer.Read(out this.position, sizeof(float), 3);
            deserializer.Read(out this.position_covariance, sizeof(float), 6);
            deserializer.Read(out this.velocity, sizeof(float), 3);
            deserializer.Read(out this.tracking_available);
            deserializer.Read(out this.tracking_state);
            deserializer.Read(out this.action_state);
            this.bounding_box_2d = BoundingBox2DiMsg.Deserialize(deserializer);
            this.bounding_box_3d = BoundingBox3DMsg.Deserialize(deserializer);
            deserializer.Read(out this.dimensions_3d, sizeof(float), 3);
            deserializer.Read(out this.skeleton_available);
            this.head_bounding_box_2d = BoundingBox2DfMsg.Deserialize(deserializer);
            this.head_bounding_box_3d = BoundingBox3DMsg.Deserialize(deserializer);
            deserializer.Read(out this.head_position, sizeof(float), 3);
            this.skeleton_2d = Skeleton2DMsg.Deserialize(deserializer);
            this.skeleton_3d = Skeleton3DMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.label);
            serializer.Write(this.label_id);
            serializer.Write(this.sublabel);
            serializer.Write(this.confidence);
            serializer.Write(this.position);
            serializer.Write(this.position_covariance);
            serializer.Write(this.velocity);
            serializer.Write(this.tracking_available);
            serializer.Write(this.tracking_state);
            serializer.Write(this.action_state);
            serializer.Write(this.bounding_box_2d);
            serializer.Write(this.bounding_box_3d);
            serializer.Write(this.dimensions_3d);
            serializer.Write(this.skeleton_available);
            serializer.Write(this.head_bounding_box_2d);
            serializer.Write(this.head_bounding_box_3d);
            serializer.Write(this.head_position);
            serializer.Write(this.skeleton_2d);
            serializer.Write(this.skeleton_3d);
        }

        public override string ToString()
        {
            return "ObjectMsg: " +
            "\nlabel: " + label.ToString() +
            "\nlabel_id: " + label_id.ToString() +
            "\nsublabel: " + sublabel.ToString() +
            "\nconfidence: " + confidence.ToString() +
            "\nposition: " + System.String.Join(", ", position.ToList()) +
            "\nposition_covariance: " + System.String.Join(", ", position_covariance.ToList()) +
            "\nvelocity: " + System.String.Join(", ", velocity.ToList()) +
            "\ntracking_available: " + tracking_available.ToString() +
            "\ntracking_state: " + tracking_state.ToString() +
            "\naction_state: " + action_state.ToString() +
            "\nbounding_box_2d: " + bounding_box_2d.ToString() +
            "\nbounding_box_3d: " + bounding_box_3d.ToString() +
            "\ndimensions_3d: " + System.String.Join(", ", dimensions_3d.ToList()) +
            "\nskeleton_available: " + skeleton_available.ToString() +
            "\nhead_bounding_box_2d: " + head_bounding_box_2d.ToString() +
            "\nhead_bounding_box_3d: " + head_bounding_box_3d.ToString() +
            "\nhead_position: " + System.String.Join(", ", head_position.ToList()) +
            "\nskeleton_2d: " + skeleton_2d.ToString() +
            "\nskeleton_3d: " + skeleton_3d.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}

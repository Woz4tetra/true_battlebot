//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.ZedInterfaces
{
    [Serializable]
    public class PlaneStampedMsg : Message
    {
        public const string k_RosMessageName = "zed_interfaces/PlaneStamped";
        public override string RosMessageName => k_RosMessageName;

        //  Standard Header
        public Std.HeaderMsg header;
        //  Mesh of the place
        public Shape.MeshMsg mesh;
        //  Representation of a plane, using the plane equation ax + by + cz + d = 0
        public Shape.PlaneMsg coefficients;
        //  Normal vector
        public Geometry.Point32Msg normal;
        //  Center point 
        public Geometry.Point32Msg center;
        //  Plane pose relative to the global reference frame
        public Geometry.TransformMsg pose;
        //  Width and height of the bounding rectangle around the plane contours
        public float[] extents;
        //  The polygon bounds of the plane
        public Geometry.PolygonMsg bounds;

        public PlaneStampedMsg()
        {
            this.header = new Std.HeaderMsg();
            this.mesh = new Shape.MeshMsg();
            this.coefficients = new Shape.PlaneMsg();
            this.normal = new Geometry.Point32Msg();
            this.center = new Geometry.Point32Msg();
            this.pose = new Geometry.TransformMsg();
            this.extents = new float[2];
            this.bounds = new Geometry.PolygonMsg();
        }

        public PlaneStampedMsg(Std.HeaderMsg header, Shape.MeshMsg mesh, Shape.PlaneMsg coefficients, Geometry.Point32Msg normal, Geometry.Point32Msg center, Geometry.TransformMsg pose, float[] extents, Geometry.PolygonMsg bounds)
        {
            this.header = header;
            this.mesh = mesh;
            this.coefficients = coefficients;
            this.normal = normal;
            this.center = center;
            this.pose = pose;
            this.extents = extents;
            this.bounds = bounds;
        }

        public static PlaneStampedMsg Deserialize(MessageDeserializer deserializer) => new PlaneStampedMsg(deserializer);

        private PlaneStampedMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.mesh = Shape.MeshMsg.Deserialize(deserializer);
            this.coefficients = Shape.PlaneMsg.Deserialize(deserializer);
            this.normal = Geometry.Point32Msg.Deserialize(deserializer);
            this.center = Geometry.Point32Msg.Deserialize(deserializer);
            this.pose = Geometry.TransformMsg.Deserialize(deserializer);
            deserializer.Read(out this.extents, sizeof(float), 2);
            this.bounds = Geometry.PolygonMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.mesh);
            serializer.Write(this.coefficients);
            serializer.Write(this.normal);
            serializer.Write(this.center);
            serializer.Write(this.pose);
            serializer.Write(this.extents);
            serializer.Write(this.bounds);
        }

        public override string ToString()
        {
            return "PlaneStampedMsg: " +
            "\nheader: " + header.ToString() +
            "\nmesh: " + mesh.ToString() +
            "\ncoefficients: " + coefficients.ToString() +
            "\nnormal: " + normal.ToString() +
            "\ncenter: " + center.ToString() +
            "\npose: " + pose.ToString() +
            "\nextents: " + System.String.Join(", ", extents.ToList()) +
            "\nbounds: " + bounds.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}

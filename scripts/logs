#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse
import datetime
import glob
import json
import os
import re
import sys
import time
from dataclasses import dataclass
from io import BufferedReader
from typing import Dict, Generator, Set

import argcomplete


class COLORS:
    BLACK = "\033[30m"
    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    BLUE = "\033[34m"
    MAGENTA = "\033[35m"
    CYAN = "\033[36m"
    GREY = "\033[37m"
    DEFAULT = "\033[39m"
    RESET = "\033[00m"


LOG_COLORS = {
    "DEBUG": COLORS.GREEN,
    "INFO": COLORS.DEFAULT,
    "WARN": COLORS.YELLOW,
    "ERROR": COLORS.RED,
}
SEVERITY_ORDER = ["DEBUG", "INFO", "WARN", "ERROR"]


class LogFilter:
    def __init__(self, filters: Dict[str, str], inverted: Set[str]) -> None:
        self.filters = filters
        self.inverted = {key: False for key in filters.keys()}
        for key in self.inverted:
            if key in inverted:
                self.inverted[key] = True
        self.has_filters = any([len(value) != 0 for value in filters.values()])

    def does_match(self, log_line: Dict) -> bool:
        if not self.has_filters:
            return True
        for key, pattern in self.filters.items():
            if len(pattern) == 0:
                continue
            inverted = self.inverted[key]
            if key not in log_line:
                return False
            match = re.search(pattern, log_line[key])
            found = match is not None
            if found and not inverted:
                return True
        return False


@dataclass
class ParserInput:
    log_level: int
    log_filter: LogFilter
    verbose: bool
    num_lines: int


def print_line(log_line: Dict, args: ParserInput) -> None:
    log_level = log_line["severity"].strip()

    try:
        level_index = SEVERITY_ORDER.index(log_level)
        log_color = LOG_COLORS[log_level]
    except ValueError:
        level_index = len(SEVERITY_ORDER)
        log_color = COLORS.CYAN

    if level_index < args.log_level:
        return
    if not args.log_filter.does_match(log_line):
        return

    date = datetime.datetime.fromtimestamp(log_line["time"])
    datestr = date.strftime("%Y-%m-%d %H:%M:%S,%f")
    message = log_line["message"]
    node = log_line["node"]
    logger = log_line["logger"]
    file = log_line["file"]
    line = log_line["line"]
    function = log_line["function"]
    thread = log_line["thread"]
    if args.verbose:
        print(
            f"{log_color}[{log_level.rjust(5)}] [{node}:{logger}] {datestr}: {message}\n"
            f"    {file}:{line} ({function})\n"
            f"    Thread: {thread}."
        )
    else:
        print(f"{log_color}[{log_level.rjust(5)}] [{node}] {datestr}: {message}")


MESSAGE_START_PATTERN = r"\"<-<"
MESSAGE_STOP_PATTERN = r">->\""
MESSAGE_ENCLOSED_PATTERN = r"\"<-<(.*)>->\""


def replace_multiline_chars(line: str) -> str:
    line = line.replace("\n", "\\n")
    line = line.replace("\r", "\\r")
    line = line.replace("\"", "\\\"")
    return line


class IncompleteLineTracker:
    def __init__(self) -> None:
        self.lines = ""
        self.is_tracking = False

    def set_success(self) -> None:
        self.is_tracking = False

    def process(self, line: str) -> str:
        start_match = re.search(MESSAGE_START_PATTERN, line)
        stop_match = re.search(MESSAGE_STOP_PATTERN, line)
        if start_match is not None and stop_match is not None:
            return (
                line[: start_match.start()]
                + "\""
                + replace_multiline_chars(line[start_match.end() : stop_match.start()])
                + "\""
                + line[stop_match.end() :]
            )

        if self.is_tracking and stop_match is not None:
            line = replace_multiline_chars(line[: stop_match.start()]) + "\"" + line[stop_match.end() :]
            return self.lines + line

        if start_match is None:
            if self.is_tracking:
                self.lines += replace_multiline_chars(line)
            else:
                raise ValueError
        else:
            line = line[: start_match.start()] + "\"" + replace_multiline_chars(line[start_match.end() :])
            self.is_tracking = True
            self.lines = line
        return ""


def process_line(data: bytes, args: ParserInput, tracker: IncompleteLineTracker) -> None:
    line = re.sub(b"\x1b\\[.{1,3}m", b"", data).decode()

    try:
        line = tracker.process(line)
        if len(line) == 0:
            return
        log_line = json.loads(line)
        if isinstance(log_line, dict):
            tracker.set_success()
            print_line(log_line, args)
        else:
            raise ValueError
    except ValueError:
        if tracker.is_tracking:
            return
        log_line = {"message": line}
        if not args.log_filter.does_match(log_line):
            return

        lower_line = line.lower()
        if "warn" in lower_line:
            color_code = COLORS.YELLOW
        elif "error" in lower_line:
            color_code = COLORS.RED
        else:
            color_code = COLORS.GREY
        sys.stdout.write(color_code + line)


DEFAULT_DIR = "/media/storage/logs"


def get_log_paths(search_dir: str) -> list[str]:
    return glob.glob(os.path.join(search_dir, "*.log"))


def find_latest_log_file(search_dir: str, wait_for_new_file: bool) -> str:
    list_of_files = get_log_paths(search_dir)
    if len(list_of_files) == 0:
        sys.stdout.write(COLORS.YELLOW + f"Waiting for log files to appear in {search_dir}\n")
        while len(list_of_files) == 0:
            list_of_files = get_log_paths(search_dir)
            time.sleep(1.0)
    if wait_for_new_file:
        now = time.time()
        list_of_files = []
        while len(list_of_files) == 0:
            list_of_files = list(filter(lambda f: os.path.getctime(f) > now, get_log_paths(search_dir)))
            time.sleep(1.0)
    latest_file = max(list_of_files, key=os.path.getctime)
    return os.path.join(search_dir, latest_file)


def print_entire_file(filename: str, args: ParserInput) -> None:
    with open(filename, "rb") as file:
        contents = file.read()
    incomplete_line_tracker = IncompleteLineTracker()
    for line in contents.splitlines():
        process_line(line + b"\n", args, incomplete_line_tracker)


FILTER_PATTERNS = ("message", "node", "logger", "file", "line", "function", "thread")


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("filename", default=None, nargs="?", help="File to watch")
    parser.add_argument("-l", "--level", default="INFO", help="Levels at or above this level will be shown")
    parser.add_argument(
        "-n",
        "--num",
        default=500,
        type=int,
        help="Number of lines to print at the start. If zero is supplied, all lines will be printed",
    )
    parser.add_argument("-a", "--all", action="store_true", help="Show all lines in the file and exit")
    parser.add_argument("-v", "--verbose", action="store_true", help="Show all info in each log line")
    parser.add_argument(
        "-w",
        "--wait-file",
        action="store_true",
        help="Wait for a new file to appear. Ignored if filename is supplied.",
    )

    for pattern in FILTER_PATTERNS:
        parser.add_argument(f"--{pattern}", type=str, help="Include by " + pattern)
        parser.add_argument(f"--~{pattern}", type=str, help="Exclude by " + pattern)

    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    return args


def follow(fp: BufferedReader, num_lines: int) -> Generator[bytes, None, None]:
    """generator function that yields new lines in a file"""
    if num_lines == 0:
        fp.seek(0, os.SEEK_END)
    else:
        if num_lines < 0:
            offset = 0
            for line_index, line in enumerate(fp):
                if line_index == abs(num_lines):
                    break
                offset += len(line)
        else:
            line_offsets = []
            offset = 0
            for line_index, line in enumerate(fp):
                line_offsets.append(offset)
                offset += len(line)
            if num_lines >= len(line_offsets):
                offset = 0
            else:
                offset = line_offsets[-num_lines]
        fp.seek(offset)

    while True:
        line = fp.readline()
        if not line:
            time.sleep(0.1)
            continue
        yield line


def follow_and_process(filename: str, args: ParserInput) -> None:
    incomplete_line_tracker = IncompleteLineTracker()
    with open(filename, "rb") as file:
        for line in follow(file, args.num_lines):
            process_line(line, args, incomplete_line_tracker)


def make_log_filters(args: argparse.Namespace) -> LogFilter:
    patterns = {}
    inverted = set()
    for field in FILTER_PATTERNS:
        include_pattern = getattr(args, field, "")
        exclude_pattern = getattr(args, "~" + field, "")
        if include_pattern and exclude_pattern:
            raise ValueError(f"Cannot specify both --{field} and --~{field}")
        elif include_pattern:
            patterns[field] = include_pattern
        elif exclude_pattern:
            patterns[field] = exclude_pattern
            inverted.add(field)
    return LogFilter(patterns, inverted)


def main() -> None:
    args = parse_args()
    wait_file = args.wait_file
    filename = args.filename
    print_all = args.all
    num_lines = args.num
    try:
        log_level = int(args.level)
    except ValueError:
        log_level = SEVERITY_ORDER.index(args.level.upper())
    verbose = args.verbose

    log_filter = make_log_filters(args)

    inputs = ParserInput(
        log_level,
        log_filter,
        verbose,
        num_lines,
    )

    if filename is None:
        filename = find_latest_log_file(DEFAULT_DIR, wait_file)

    if print_all:
        print_entire_file(filename, inputs)
        if args.filename is None:
            print(f"\n{COLORS.RESET}Log path: {filename}")
        return
    try:
        follow_and_process(filename, inputs)
    except KeyboardInterrupt:
        pass
    finally:
        if args.filename is None:
            print(f"\n{COLORS.RESET}Log path: {filename}")


if __name__ == "__main__":
    main()

#!/usr/bin/env python3

import argparse
import math

from bw_tools.structs.rpy import RPY
from bw_tools.structs.transform3d import Transform3D
from geometry_msgs.msg import Quaternion, Vector3


def quaternion_string(quaternion: Quaternion) -> str:
    return f"x: {quaternion.x:6.3f}, y: {quaternion.y:6.3f}, z: {quaternion.z:6.3f}, w: {quaternion.w:6.3f}"


def main():
    """
    A command line tool for converting between quaternion and RPY representations
    """
    parser = argparse.ArgumentParser(description=main.__doc__)
    parser.add_argument("-q", "--quaternion", nargs="+", help="Input quaternion in the form w x y z")
    parser.add_argument("-e", "--euler", nargs="+", help="Input RPY in the form roll pitch yaw in degrees")
    args = parser.parse_args()

    if args.quaternion is not None:
        quaternion = Quaternion(*[float(x) for x in args.quaternion])
        print("Quaternion: ", quaternion)
        transform = Transform3D.from_position_and_quaternion(Vector3(0, 0, 0), quaternion)
        rpy = transform.rpy
        print("RPY: ", rpy)

    if args.euler is not None:
        rpy = RPY([math.radians(float(x)) for x in args.euler])
        print("RPY: ", rpy)
        transform = Transform3D.from_position_and_rpy(Vector3(0, 0, 0), rpy)
        quaternion = transform.quaternion
        print("Quaternion: ", quaternion_string(quaternion))


if __name__ == "__main__":
    main()

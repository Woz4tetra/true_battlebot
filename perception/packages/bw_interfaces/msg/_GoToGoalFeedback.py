# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/GoToGoalFeedback.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from bw_interfaces.msg._Trajectory import Trajectory as bw_interfaces_msg_Trajectory
from geometry_msgs.msg._Point import Point as geometry_msgs_msg_Point
from geometry_msgs.msg._Pose import Pose as geometry_msgs_msg_Pose
from geometry_msgs.msg._PoseStamped import PoseStamped as geometry_msgs_msg_PoseStamped
from geometry_msgs.msg._Quaternion import Quaternion as geometry_msgs_msg_Quaternion
from geometry_msgs.msg._Twist import Twist as geometry_msgs_msg_Twist
from geometry_msgs.msg._TwistStamped import TwistStamped as geometry_msgs_msg_TwistStamped
from geometry_msgs.msg._Vector3 import Vector3 as geometry_msgs_msg_Vector3
from std_msgs.msg._Header import Header as std_msgs_msg_Header

class GoToGoalFeedback(genpy.Message):
  _md5sum: str = "e3eff05431d690131f0bb27f38045fff"
  _type: str = "bw_interfaces/GoToGoalFeedback"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """bool is_done
float64 distance_to_goal
float64 time_left
float64 total_time
bw_interfaces/Trajectory trajectory

================================================================================
MSG: bw_interfaces/Trajectory
Header header
geometry_msgs/PoseStamped[] poses
geometry_msgs/TwistStamped[] twists

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__: List[str] = ['is_done','distance_to_goal','time_left','total_time','trajectory']
  _slot_types: List[str] = ['bool','float64','float64','float64','bw_interfaces/Trajectory']

  def __init__(self, is_done: bool = None,
    distance_to_goal: float = None,
    time_left: float = None,
    total_time: float = None,
    trajectory: bw_interfaces_msg_Trajectory = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      is_done,distance_to_goal,time_left,total_time,trajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(GoToGoalFeedback, self).__init__(**{'is_done': is_done, 'distance_to_goal': distance_to_goal, 'time_left': time_left, 'total_time': total_time, 'trajectory': trajectory})
    if self.is_done is None:
      self.is_done: bool = False
    else:
      self.is_done = is_done
    if self.distance_to_goal is None:
      self.distance_to_goal: float = 0.
    else:
      self.distance_to_goal = distance_to_goal
    if self.time_left is None:
      self.time_left: float = 0.
    else:
      self.time_left = time_left
    if self.total_time is None:
      self.total_time: float = 0.
    else:
      self.total_time = total_time
    if self.trajectory is None:
      self.trajectory: bw_interfaces_msg_Trajectory = bw_interfaces_msg_Trajectory()
    else:
      self.trajectory = trajectory

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3d3I().pack(_x.is_done, _x.distance_to_goal, _x.time_left, _x.total_time, _x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.trajectory.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.poses:
        _v141 = val1.header
        _x = _v141.seq
        buff.write(_get_struct_I().pack(_x))
        _v142 = _v141.stamp
        _x = _v142
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v141.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v143 = val1.pose
        _v144 = _v143.position
        _x = _v144
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v145 = _v143.orientation
        _x = _v145
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.trajectory.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.twists:
        _v146 = val1.header
        _x = _v146.seq
        buff.write(_get_struct_I().pack(_x))
        _v147 = _v146.stamp
        _x = _v147
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v146.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v148 = val1.twist
        _v149 = _v148.linear
        _x = _v149
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v150 = _v148.angular
        _x = _v150
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'GoToGoalFeedback':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = bw_interfaces_msg_Trajectory()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.is_done, _x.distance_to_goal, _x.time_left, _x.total_time, _x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_B3d3I().unpack(bytes_[start:end])
      self.is_done = bool(self.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.header.frame_id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.trajectory.poses = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_PoseStamped()
        _v151 = val1.header
        start = end
        end += 4
        (_v151.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v152 = _v151.stamp
        _x = _v152
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v151.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v151.frame_id = bytes_[start:end]
        _v153 = val1.pose
        _v154 = _v153.position
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v155 = _v153.orientation
        _x = _v155
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        self.trajectory.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.trajectory.twists = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_TwistStamped()
        _v156 = val1.header
        start = end
        end += 4
        (_v156.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v157 = _v156.stamp
        _x = _v157
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v156.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v156.frame_id = bytes_[start:end]
        _v158 = val1.twist
        _v159 = _v158.linear
        _x = _v159
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v160 = _v158.angular
        _x = _v160
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        self.trajectory.twists.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3d3I().pack(_x.is_done, _x.distance_to_goal, _x.time_left, _x.total_time, _x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.trajectory.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.poses:
        _v161 = val1.header
        _x = _v161.seq
        buff.write(_get_struct_I().pack(_x))
        _v162 = _v161.stamp
        _x = _v162
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v161.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v163 = val1.pose
        _v164 = _v163.position
        _x = _v164
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v165 = _v163.orientation
        _x = _v165
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.trajectory.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.twists:
        _v166 = val1.header
        _x = _v166.seq
        buff.write(_get_struct_I().pack(_x))
        _v167 = _v166.stamp
        _x = _v167
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v166.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v168 = val1.twist
        _v169 = _v168.linear
        _x = _v169
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v170 = _v168.angular
        _x = _v170
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = bw_interfaces_msg_Trajectory()
      end = 0
      _x = self
      start = end
      end += 37
      (_x.is_done, _x.distance_to_goal, _x.time_left, _x.total_time, _x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_B3d3I().unpack(bytes_[start:end])
      self.is_done = bool(self.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.header.frame_id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.trajectory.poses = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_PoseStamped()
        _v171 = val1.header
        start = end
        end += 4
        (_v171.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v172 = _v171.stamp
        _x = _v172
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v171.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v171.frame_id = bytes_[start:end]
        _v173 = val1.pose
        _v174 = _v173.position
        _x = _v174
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v175 = _v173.orientation
        _x = _v175
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        self.trajectory.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.trajectory.twists = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_TwistStamped()
        _v176 = val1.header
        start = end
        end += 4
        (_v176.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v177 = _v176.stamp
        _x = _v177
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v176.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v176.frame_id = bytes_[start:end]
        _v178 = val1.twist
        _v179 = _v178.linear
        _x = _v179
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v180 = _v178.angular
        _x = _v180
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        self.trajectory.twists.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B3d3I = None
def _get_struct_B3d3I():
    global _struct_B3d3I
    if _struct_B3d3I is None:
        _struct_B3d3I = struct.Struct("<B3d3I")
    return _struct_B3d3I

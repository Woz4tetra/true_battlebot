# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/SegmentationInstance.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bw_interfaces.msg

class SegmentationInstance(genpy.Message):
  _md5sum = "81548aa72ad9cd0df8f9d9a3b2415a2b"
  _type = "bw_interfaces/SegmentationInstance"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bw_interfaces/Contour[] contours
float32 score
string label
uint32 class_index
uint32 object_index
bool has_holes

================================================================================
MSG: bw_interfaces/Contour
bw_interfaces/UVKeypoint[] points
float64 area
================================================================================
MSG: bw_interfaces/UVKeypoint
uint32 x
uint32 y
"""
  __slots__ = ['contours','score','label','class_index','object_index','has_holes']
  _slot_types = ['bw_interfaces/Contour[]','float32','string','uint32','uint32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       contours,score,label,class_index,object_index,has_holes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SegmentationInstance, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.contours is None:
        self.contours = []
      if self.score is None:
        self.score = 0.
      if self.label is None:
        self.label = ''
      if self.class_index is None:
        self.class_index = 0
      if self.object_index is None:
        self.object_index = 0
      if self.has_holes is None:
        self.has_holes = False
    else:
      self.contours = []
      self.score = 0.
      self.label = ''
      self.class_index = 0
      self.object_index = 0
      self.has_holes = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2I().pack(_x.x, _x.y))
        _x = val1.area
        buff.write(_get_struct_d().pack(_x))
      _x = self.score
      buff.write(_get_struct_f().pack(_x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IB().pack(_x.class_index, _x.object_index, _x.has_holes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contours is None:
        self.contours = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = bw_interfaces.msg.Contour()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = bw_interfaces.msg.UVKeypoint()
          _x = val2
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2I().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 8
        (val1.area,) = _get_struct_d().unpack(str[start:end])
        self.contours.append(val1)
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.class_index, _x.object_index, _x.has_holes,) = _get_struct_2IB().unpack(str[start:end])
      self.has_holes = bool(self.has_holes)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2I().pack(_x.x, _x.y))
        _x = val1.area
        buff.write(_get_struct_d().pack(_x))
      _x = self.score
      buff.write(_get_struct_f().pack(_x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IB().pack(_x.class_index, _x.object_index, _x.has_holes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contours is None:
        self.contours = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = bw_interfaces.msg.Contour()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = bw_interfaces.msg.UVKeypoint()
          _x = val2
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2I().unpack(str[start:end])
          val1.points.append(val2)
        start = end
        end += 8
        (val1.area,) = _get_struct_d().unpack(str[start:end])
        self.contours.append(val1)
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.label = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.class_index, _x.object_index, _x.has_holes,) = _get_struct_2IB().unpack(str[start:end])
      self.has_holes = bool(self.has_holes)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2IB = None
def _get_struct_2IB():
    global _struct_2IB
    if _struct_2IB is None:
        _struct_2IB = struct.Struct("<2IB")
    return _struct_2IB
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

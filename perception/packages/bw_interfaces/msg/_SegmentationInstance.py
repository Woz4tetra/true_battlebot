# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/SegmentationInstance.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from bw_interfaces.msg._Contour import Contour as bw_interfaces_msg_Contour
from bw_interfaces.msg._UVKeypoint import UVKeypoint as bw_interfaces_msg_UVKeypoint

class SegmentationInstance(genpy.Message):
  _md5sum: str = "55a310d93dad04c0354a009bb2379b30"
  _type: str = "bw_interfaces/SegmentationInstance"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """bw_interfaces/Contour[] contours
float32 score
string label
uint32 class_index
uint32 object_index
bool has_holes

================================================================================
MSG: bw_interfaces/Contour
bw_interfaces/UVKeypoint[] points
float64 area
================================================================================
MSG: bw_interfaces/UVKeypoint
float32 x
float32 y
"""
  __slots__: List[str] = ['contours','score','label','class_index','object_index','has_holes']
  _slot_types: List[str] = ['bw_interfaces/Contour[]','float32','string','uint32','uint32','bool']

  def __init__(self, contours: List[bw_interfaces_msg_Contour] = None,
    score: float = None,
    label: str = None,
    class_index: int = None,
    object_index: int = None,
    has_holes: bool = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      contours,score,label,class_index,object_index,has_holes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(SegmentationInstance, self).__init__(**{'contours': contours, 'score': score, 'label': label, 'class_index': class_index, 'object_index': object_index, 'has_holes': has_holes})
    if self.contours is None:
      self.contours: List[bw_interfaces_msg_Contour] = []
    else:
      self.contours = contours
    if self.score is None:
      self.score: float = 0.
    else:
      self.score = score
    if self.label is None:
      self.label: str = ''
    else:
      self.label = label
    if self.class_index is None:
      self.class_index: int = 0
    else:
      self.class_index = class_index
    if self.object_index is None:
      self.object_index: int = 0
    else:
      self.object_index = object_index
    if self.has_holes is None:
      self.has_holes: bool = False
    else:
      self.has_holes = has_holes

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.area
        buff.write(_get_struct_d().pack(_x))
      _x = self.score
      buff.write(_get_struct_f().pack(_x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IB().pack(_x.class_index, _x.object_index, _x.has_holes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'SegmentationInstance':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contours is None:
        self.contours = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_Contour()
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = bw_interfaces_msg_UVKeypoint()
          _x = val2
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(bytes_[start:end])
          val1.points.append(val2)
        start = end
        end += 8
        (val1.area,) = _get_struct_d().unpack(bytes_[start:end])
        self.contours.append(val1)
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.label = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = bytes_[start:end]
      _x = self
      start = end
      end += 9
      (_x.class_index, _x.object_index, _x.has_holes,) = _get_struct_2IB().unpack(bytes_[start:end])
      self.has_holes = bool(self.has_holes)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.contours)
      buff.write(_struct_I.pack(length))
      for val1 in self.contours:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_2f().pack(_x.x, _x.y))
        _x = val1.area
        buff.write(_get_struct_d().pack(_x))
      _x = self.score
      buff.write(_get_struct_f().pack(_x))
      _x = self.label
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2IB().pack(_x.class_index, _x.object_index, _x.has_holes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.contours is None:
        self.contours = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.contours = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_Contour()
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = bw_interfaces_msg_UVKeypoint()
          _x = val2
          start = end
          end += 8
          (_x.x, _x.y,) = _get_struct_2f().unpack(bytes_[start:end])
          val1.points.append(val2)
        start = end
        end += 8
        (val1.area,) = _get_struct_d().unpack(bytes_[start:end])
        self.contours.append(val1)
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.label = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.label = bytes_[start:end]
      _x = self
      start = end
      end += 9
      (_x.class_index, _x.object_index, _x.has_holes,) = _get_struct_2IB().unpack(bytes_[start:end])
      self.has_holes = bool(self.has_holes)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IB = None
def _get_struct_2IB():
    global _struct_2IB
    if _struct_2IB is None:
        _struct_2IB = struct.Struct("<2IB")
    return _struct_2IB
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f

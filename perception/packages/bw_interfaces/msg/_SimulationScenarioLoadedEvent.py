# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/SimulationScenarioLoadedEvent.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from bw_interfaces.msg._SimulationObjectiveProgress import SimulationObjectiveProgress as bw_interfaces_msg_SimulationObjectiveProgress
from std_msgs.msg._Header import Header as std_msgs_msg_Header
import genpy

class SimulationScenarioLoadedEvent(genpy.Message):
  _md5sum: str = "bad7b2458025562335b11bbfd7dbbf8a"
  _type: str = "bw_interfaces/SimulationScenarioLoadedEvent"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """bw_interfaces/SimulationObjectiveProgress[] objectives
string scenario_name

================================================================================
MSG: bw_interfaces/SimulationObjectiveProgress
std_msgs/Header header
time duration
uint32 objective_index
uint32 sequence_length
string objective_name

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__: List[str] = ['objectives','scenario_name']
  _slot_types: List[str] = ['bw_interfaces/SimulationObjectiveProgress[]','string']

  def __init__(self, objectives: List[bw_interfaces_msg_SimulationObjectiveProgress] = None,
    scenario_name: str = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      objectives,scenario_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(SimulationScenarioLoadedEvent, self).__init__(**{'objectives': objectives, 'scenario_name': scenario_name})
    if self.objectives is None:
      self.objectives: List[bw_interfaces_msg_SimulationObjectiveProgress] = []
    else:
      self.objectives = objectives
    if self.scenario_name is None:
      self.scenario_name: str = ''
    else:
      self.scenario_name = scenario_name

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      length = len(self.objectives)
      buff.write(_struct_I.pack(length))
      for val1 in self.objectives:
        _v117 = val1.header
        _x = _v117.seq
        buff.write(_get_struct_I().pack(_x))
        _v118 = _v117.stamp
        _x = _v118
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v117.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v119 = val1.duration
        _x = _v119
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.objective_index, _x.sequence_length))
        _x = val1.objective_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.scenario_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'SimulationScenarioLoadedEvent':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objectives is None:
        self.objectives = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.objectives = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_SimulationObjectiveProgress()
        _v120 = val1.header
        start = end
        end += 4
        (_v120.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v121 = _v120.stamp
        _x = _v121
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v120.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v120.frame_id = bytes_[start:end]
        _v122 = val1.duration
        _x = _v122
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        _x = val1
        start = end
        end += 8
        (_x.objective_index, _x.sequence_length,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1.objective_name = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.objective_name = bytes_[start:end]
        self.objectives.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.scenario_name = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scenario_name = bytes_[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.objectives)
      buff.write(_struct_I.pack(length))
      for val1 in self.objectives:
        _v123 = val1.header
        _x = _v123.seq
        buff.write(_get_struct_I().pack(_x))
        _v124 = _v123.stamp
        _x = _v124
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v123.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v125 = val1.duration
        _x = _v125
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_2I().pack(_x.objective_index, _x.sequence_length))
        _x = val1.objective_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.scenario_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.objectives is None:
        self.objectives = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.objectives = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_SimulationObjectiveProgress()
        _v126 = val1.header
        start = end
        end += 4
        (_v126.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v127 = _v126.stamp
        _x = _v127
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v126.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v126.frame_id = bytes_[start:end]
        _v128 = val1.duration
        _x = _v128
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        _x = val1
        start = end
        end += 8
        (_x.objective_index, _x.sequence_length,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1.objective_name = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.objective_name = bytes_[start:end]
        self.objectives.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.scenario_name = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.scenario_name = bytes_[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I

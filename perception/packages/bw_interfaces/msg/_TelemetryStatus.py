# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/TelemetryStatus.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy

class TelemetryStatus(genpy.Message):
  _md5sum: str = "90b1c2bd5acd90a989373069734b506e"
  _type: str = "bw_interfaces/TelemetryStatus"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """bool is_armed
bool is_ready
bool is_connected
float32 battery_voltage
float32 battery_current
float32 battery_consumption
string link_stats_json
string flight_mode"""
  __slots__: List[str] = ['is_armed','is_ready','is_connected','battery_voltage','battery_current','battery_consumption','link_stats_json','flight_mode']
  _slot_types: List[str] = ['bool','bool','bool','float32','float32','float32','string','string']

  def __init__(self, is_armed: bool = None,
    is_ready: bool = None,
    is_connected: bool = None,
    battery_voltage: float = None,
    battery_current: float = None,
    battery_consumption: float = None,
    link_stats_json: str = None,
    flight_mode: str = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      is_armed,is_ready,is_connected,battery_voltage,battery_current,battery_consumption,link_stats_json,flight_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(TelemetryStatus, self).__init__(**{'is_armed': is_armed, 'is_ready': is_ready, 'is_connected': is_connected, 'battery_voltage': battery_voltage, 'battery_current': battery_current, 'battery_consumption': battery_consumption, 'link_stats_json': link_stats_json, 'flight_mode': flight_mode})
    if self.is_armed is None:
      self.is_armed: bool = False
    else:
      self.is_armed = is_armed
    if self.is_ready is None:
      self.is_ready: bool = False
    else:
      self.is_ready = is_ready
    if self.is_connected is None:
      self.is_connected: bool = False
    else:
      self.is_connected = is_connected
    if self.battery_voltage is None:
      self.battery_voltage: float = 0.
    else:
      self.battery_voltage = battery_voltage
    if self.battery_current is None:
      self.battery_current: float = 0.
    else:
      self.battery_current = battery_current
    if self.battery_consumption is None:
      self.battery_consumption: float = 0.
    else:
      self.battery_consumption = battery_consumption
    if self.link_stats_json is None:
      self.link_stats_json: str = ''
    else:
      self.link_stats_json = link_stats_json
    if self.flight_mode is None:
      self.flight_mode: str = ''
    else:
      self.flight_mode = flight_mode

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B3f().pack(_x.is_armed, _x.is_ready, _x.is_connected, _x.battery_voltage, _x.battery_current, _x.battery_consumption))
      _x = self.link_stats_json
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flight_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'TelemetryStatus':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.is_armed, _x.is_ready, _x.is_connected, _x.battery_voltage, _x.battery_current, _x.battery_consumption,) = _get_struct_3B3f().unpack(bytes_[start:end])
      self.is_armed = bool(self.is_armed)
      self.is_ready = bool(self.is_ready)
      self.is_connected = bool(self.is_connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.link_stats_json = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.link_stats_json = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flight_mode = bytes_[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B3f().pack(_x.is_armed, _x.is_ready, _x.is_connected, _x.battery_voltage, _x.battery_current, _x.battery_consumption))
      _x = self.link_stats_json
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.flight_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.is_armed, _x.is_ready, _x.is_connected, _x.battery_voltage, _x.battery_current, _x.battery_consumption,) = _get_struct_3B3f().unpack(bytes_[start:end])
      self.is_armed = bool(self.is_armed)
      self.is_ready = bool(self.is_ready)
      self.is_connected = bool(self.is_connected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.link_stats_json = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.link_stats_json = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.flight_mode = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.flight_mode = bytes_[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B3f = None
def _get_struct_3B3f():
    global _struct_3B3f
    if _struct_3B3f is None:
        _struct_3B3f = struct.Struct("<3B3f")
    return _struct_3B3f

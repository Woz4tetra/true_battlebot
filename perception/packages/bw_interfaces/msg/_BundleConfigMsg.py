# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/BundleConfigMsg.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from bw_interfaces.msg._TagConfigMsg import TagConfigMsg as bw_interfaces_msg_TagConfigMsg

class BundleConfigMsg(genpy.Message):
  _md5sum: str = "6e23b8ef08e324e9238cce60c15d854c"
  _type: str = "bw_interfaces/BundleConfigMsg"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """string name
bw_interfaces/TagConfigMsg[] tags

================================================================================
MSG: bw_interfaces/TagConfigMsg
int32 tag_id
float64 tag_size
float64 x  # meters
float64 y  # meters
float64 z  # meters
float64 roll  # degrees
float64 pitch  # degrees
float64 yaw  # degrees
"""
  __slots__: List[str] = ['name','tags']
  _slot_types: List[str] = ['string','bw_interfaces/TagConfigMsg[]']

  def __init__(self, name: str = None,
    tags: List[bw_interfaces_msg_TagConfigMsg] = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      name,tags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(BundleConfigMsg, self).__init__(**{'name': name, 'tags': tags})
    if self.name is None:
      self.name: str = ''
    else:
      self.name = name
    if self.tags is None:
      self.tags: List[bw_interfaces_msg_TagConfigMsg] = []
    else:
      self.tags = tags

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tags)
      buff.write(_struct_I.pack(length))
      for val1 in self.tags:
        _x = val1
        buff.write(_get_struct_i7d().pack(_x.tag_id, _x.tag_size, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'BundleConfigMsg':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tags is None:
        self.tags = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.name = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.tags = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_TagConfigMsg()
        _x = val1
        start = end
        end += 60
        (_x.tag_id, _x.tag_size, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw,) = _get_struct_i7d().unpack(bytes_[start:end])
        self.tags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.tags)
      buff.write(_struct_I.pack(length))
      for val1 in self.tags:
        _x = val1
        buff.write(_get_struct_i7d().pack(_x.tag_id, _x.tag_size, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.tags is None:
        self.tags = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.name = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.tags = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_TagConfigMsg()
        _x = val1
        start = end
        end += 60
        (_x.tag_id, _x.tag_size, _x.x, _x.y, _x.z, _x.roll, _x.pitch, _x.yaw,) = _get_struct_i7d().unpack(bytes_[start:end])
        self.tags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i7d = None
def _get_struct_i7d():
    global _struct_i7d
    if _struct_i7d is None:
        _struct_i7d = struct.Struct("<i7d")
    return _struct_i7d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/GoToGoalActionGoal.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from actionlib_msgs.msg._GoalID import GoalID as actionlib_msgs_msg_GoalID
from bw_interfaces.msg._GoToGoalGoal import GoToGoalGoal as bw_interfaces_msg_GoToGoalGoal
from geometry_msgs.msg._Point import Point as geometry_msgs_msg_Point
from geometry_msgs.msg._Pose import Pose as geometry_msgs_msg_Pose
from geometry_msgs.msg._PoseStamped import PoseStamped as geometry_msgs_msg_PoseStamped
from geometry_msgs.msg._Quaternion import Quaternion as geometry_msgs_msg_Quaternion
from std_msgs.msg._Header import Header as std_msgs_msg_Header
import genpy

class GoToGoalActionGoal(genpy.Message):
  _md5sum: str = "7b3e99fb4efeac47e362330e88b86b16"
  _type: str = "bw_interfaces/GoToGoalActionGoal"
  _has_header: bool = True  # flag to mark the presence of a Header object
  _full_text: str = """Header header
actionlib_msgs/GoalID goal_id
GoToGoalGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: bw_interfaces/GoToGoalGoal
string goal_type
geometry_msgs/PoseStamped goal
string target_name
string strategy
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__: List[str] = ['header','goal_id','goal']
  _slot_types: List[str] = ['std_msgs/Header','actionlib_msgs/GoalID','bw_interfaces/GoToGoalGoal']

  def __init__(self, header: std_msgs_msg_Header = None,
    goal_id: actionlib_msgs_msg_GoalID = None,
    goal: bw_interfaces_msg_GoToGoalGoal = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      header,goal_id,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(GoToGoalActionGoal, self).__init__(**{'header': header, 'goal_id': goal_id, 'goal': goal})
    if self.header is None:
      self.header: std_msgs_msg_Header = std_msgs_msg_Header()
    else:
      self.header = header
    if self.goal_id is None:
      self.goal_id: actionlib_msgs_msg_GoalID = actionlib_msgs_msg_GoalID()
    else:
      self.goal_id = goal_id
    if self.goal is None:
      self.goal: bw_interfaces_msg_GoToGoalGoal = bw_interfaces_msg_GoToGoalGoal()
    else:
      self.goal = goal

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.goal_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.goal.header.seq, _x.goal.goal.header.stamp.secs, _x.goal.goal.header.stamp.nsecs))
      _x = self.goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.goal.goal.pose.position.x, _x.goal.goal.pose.position.y, _x.goal.goal.pose.position.z, _x.goal.goal.pose.orientation.x, _x.goal.goal.pose.orientation.y, _x.goal.goal.pose.orientation.z, _x.goal.goal.pose.orientation.w))
      _x = self.goal.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.strategy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'GoToGoalActionGoal':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs_msg_Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs_msg_GoalID()
      if self.goal is None:
        self.goal = bw_interfaces_msg_GoToGoalGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal_id.id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.goal_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.goal_type = bytes_[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.goal.header.seq, _x.goal.goal.header.stamp.secs, _x.goal.goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal.goal.pose.position.x, _x.goal.goal.pose.position.y, _x.goal.goal.pose.position.z, _x.goal.goal.pose.orientation.x, _x.goal.goal.pose.orientation.y, _x.goal.goal.pose.orientation.z, _x.goal.goal.pose.orientation.w,) = _get_struct_7d().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.target_name = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.target_name = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.strategy = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.strategy = bytes_[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.goal_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.goal.header.seq, _x.goal.goal.header.stamp.secs, _x.goal.goal.header.stamp.nsecs))
      _x = self.goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.goal.goal.pose.position.x, _x.goal.goal.pose.position.y, _x.goal.goal.pose.position.z, _x.goal.goal.pose.orientation.x, _x.goal.goal.pose.orientation.y, _x.goal.goal.pose.orientation.z, _x.goal.goal.pose.orientation.w))
      _x = self.goal.target_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.goal.strategy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs_msg_Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs_msg_GoalID()
      if self.goal is None:
        self.goal = bw_interfaces_msg_GoToGoalGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal_id.id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.goal_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.goal_type = bytes_[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.goal.header.seq, _x.goal.goal.header.stamp.secs, _x.goal.goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal.goal.pose.position.x, _x.goal.goal.pose.position.y, _x.goal.goal.pose.position.z, _x.goal.goal.pose.orientation.x, _x.goal.goal.pose.orientation.y, _x.goal.goal.pose.orientation.z, _x.goal.goal.pose.orientation.w,) = _get_struct_7d().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.target_name = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.target_name = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.strategy = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.strategy = bytes_[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d

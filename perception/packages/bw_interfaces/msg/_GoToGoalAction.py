# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/GoToGoalAction.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from actionlib_msgs.msg._GoalID import GoalID as actionlib_msgs_msg_GoalID
from actionlib_msgs.msg._GoalStatus import GoalStatus as actionlib_msgs_msg_GoalStatus
from bw_interfaces.msg._GoToGoalActionFeedback import GoToGoalActionFeedback as bw_interfaces_msg_GoToGoalActionFeedback
from bw_interfaces.msg._GoToGoalActionGoal import GoToGoalActionGoal as bw_interfaces_msg_GoToGoalActionGoal
from bw_interfaces.msg._GoToGoalActionResult import GoToGoalActionResult as bw_interfaces_msg_GoToGoalActionResult
from bw_interfaces.msg._GoToGoalFeedback import GoToGoalFeedback as bw_interfaces_msg_GoToGoalFeedback
from bw_interfaces.msg._GoToGoalGoal import GoToGoalGoal as bw_interfaces_msg_GoToGoalGoal
from bw_interfaces.msg._GoToGoalResult import GoToGoalResult as bw_interfaces_msg_GoToGoalResult
from bw_interfaces.msg._GoalEngineConfig import GoalEngineConfig as bw_interfaces_msg_GoalEngineConfig
from bw_interfaces.msg._Trajectory import Trajectory as bw_interfaces_msg_Trajectory
from geometry_msgs.msg._Point import Point as geometry_msgs_msg_Point
from geometry_msgs.msg._Pose import Pose as geometry_msgs_msg_Pose
from geometry_msgs.msg._PoseStamped import PoseStamped as geometry_msgs_msg_PoseStamped
from geometry_msgs.msg._Quaternion import Quaternion as geometry_msgs_msg_Quaternion
from geometry_msgs.msg._Twist import Twist as geometry_msgs_msg_Twist
from geometry_msgs.msg._TwistStamped import TwistStamped as geometry_msgs_msg_TwistStamped
from geometry_msgs.msg._Vector3 import Vector3 as geometry_msgs_msg_Vector3
from std_msgs.msg._Header import Header as std_msgs_msg_Header
import genpy

class GoToGoalAction(genpy.Message):
  _md5sum: str = "3f3041ee116342faf1e703a36aa7db1c"
  _type: str = "bw_interfaces/GoToGoalAction"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """GoToGoalActionGoal action_goal
GoToGoalActionResult action_result
GoToGoalActionFeedback action_feedback

================================================================================
MSG: bw_interfaces/GoToGoalActionGoal
Header header
actionlib_msgs/GoalID goal_id
GoToGoalGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: bw_interfaces/GoToGoalGoal
string goal_type
geometry_msgs/PoseStamped goal
string target_type
string strategy
bool continuously_select_goal
bool overwrite_engine_config
bw_interfaces/GoalEngineConfig engine_config
float64 xy_tolerance
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: bw_interfaces/GoalEngineConfig
float64 max_velocity
float64 max_angular_velocity
float64 max_acceleration
float64 max_centripetal_acceleration
bool is_max_centripetal_acceleration
bool rotate_at_end
float64 start_velocity
bool is_start_velocity
float64 end_velocity
bool is_end_velocity

================================================================================
MSG: bw_interfaces/GoToGoalActionResult
Header header
actionlib_msgs/GoalStatus status
GoToGoalResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: bw_interfaces/GoToGoalResult
bool success
================================================================================
MSG: bw_interfaces/GoToGoalActionFeedback
Header header
actionlib_msgs/GoalStatus status
GoToGoalFeedback feedback

================================================================================
MSG: bw_interfaces/GoToGoalFeedback
bool is_done
float64 distance_to_goal
float64 time_left
float64 total_time
bw_interfaces/Trajectory trajectory

================================================================================
MSG: bw_interfaces/Trajectory
Header header
geometry_msgs/PoseStamped[] poses
geometry_msgs/TwistStamped[] twists

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3 linear
Vector3 angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__: List[str] = ['action_goal','action_result','action_feedback']
  _slot_types: List[str] = ['bw_interfaces/GoToGoalActionGoal','bw_interfaces/GoToGoalActionResult','bw_interfaces/GoToGoalActionFeedback']

  def __init__(self, action_goal: bw_interfaces_msg_GoToGoalActionGoal = None,
    action_result: bw_interfaces_msg_GoToGoalActionResult = None,
    action_feedback: bw_interfaces_msg_GoToGoalActionFeedback = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(GoToGoalAction, self).__init__(**{'action_goal': action_goal, 'action_result': action_result, 'action_feedback': action_feedback})
    if self.action_goal is None:
      self.action_goal: bw_interfaces_msg_GoToGoalActionGoal = bw_interfaces_msg_GoToGoalActionGoal()
    else:
      self.action_goal = action_goal
    if self.action_result is None:
      self.action_result: bw_interfaces_msg_GoToGoalActionResult = bw_interfaces_msg_GoToGoalActionResult()
    else:
      self.action_result = action_result
    if self.action_feedback is None:
      self.action_feedback: bw_interfaces_msg_GoToGoalActionFeedback = bw_interfaces_msg_GoToGoalActionFeedback()
    else:
      self.action_feedback = action_feedback

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.goal_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.goal.header.seq, _x.action_goal.goal.goal.header.stamp.secs, _x.action_goal.goal.goal.header.stamp.nsecs))
      _x = self.action_goal.goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.action_goal.goal.goal.pose.position.x, _x.action_goal.goal.goal.pose.position.y, _x.action_goal.goal.goal.pose.position.z, _x.action_goal.goal.goal.pose.orientation.x, _x.action_goal.goal.goal.pose.orientation.y, _x.action_goal.goal.goal.pose.orientation.z, _x.action_goal.goal.goal.pose.orientation.w))
      _x = self.action_goal.goal.target_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.strategy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B4d2BdBdBd3I().pack(_x.action_goal.goal.continuously_select_goal, _x.action_goal.goal.overwrite_engine_config, _x.action_goal.goal.engine_config.max_velocity, _x.action_goal.goal.engine_config.max_angular_velocity, _x.action_goal.goal.engine_config.max_acceleration, _x.action_goal.goal.engine_config.max_centripetal_acceleration, _x.action_goal.goal.engine_config.is_max_centripetal_acceleration, _x.action_goal.goal.engine_config.rotate_at_end, _x.action_goal.goal.engine_config.start_velocity, _x.action_goal.goal.engine_config.is_start_velocity, _x.action_goal.goal.engine_config.end_velocity, _x.action_goal.goal.engine_config.is_end_velocity, _x.action_goal.goal.xy_tolerance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3d3I().pack(_x.action_feedback.feedback.is_done, _x.action_feedback.feedback.distance_to_goal, _x.action_feedback.feedback.time_left, _x.action_feedback.feedback.total_time, _x.action_feedback.feedback.trajectory.header.seq, _x.action_feedback.feedback.trajectory.header.stamp.secs, _x.action_feedback.feedback.trajectory.header.stamp.nsecs))
      _x = self.action_feedback.feedback.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.trajectory.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.trajectory.poses:
        _v61 = val1.header
        _x = _v61.seq
        buff.write(_get_struct_I().pack(_x))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v63 = val1.pose
        _v64 = _v63.position
        _x = _v64
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v65 = _v63.orientation
        _x = _v65
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_feedback.feedback.trajectory.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.trajectory.twists:
        _v66 = val1.header
        _x = _v66.seq
        buff.write(_get_struct_I().pack(_x))
        _v67 = _v66.stamp
        _x = _v67
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v66.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v68 = val1.twist
        _v69 = _v68.linear
        _x = _v69
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v70 = _v68.angular
        _x = _v70
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'GoToGoalAction':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = bw_interfaces_msg_GoToGoalActionGoal()
      if self.action_result is None:
        self.action_result = bw_interfaces_msg_GoToGoalActionResult()
      if self.action_feedback is None:
        self.action_feedback = bw_interfaces_msg_GoToGoalActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.goal_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.goal_type = bytes_[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.goal.header.seq, _x.action_goal.goal.goal.header.stamp.secs, _x.action_goal.goal.goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.goal.pose.position.x, _x.action_goal.goal.goal.pose.position.y, _x.action_goal.goal.goal.pose.position.z, _x.action_goal.goal.goal.pose.orientation.x, _x.action_goal.goal.goal.pose.orientation.y, _x.action_goal.goal.goal.pose.orientation.z, _x.action_goal.goal.goal.pose.orientation.w,) = _get_struct_7d().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.target_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.target_type = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.strategy = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.strategy = bytes_[start:end]
      _x = self
      start = end
      end += 74
      (_x.action_goal.goal.continuously_select_goal, _x.action_goal.goal.overwrite_engine_config, _x.action_goal.goal.engine_config.max_velocity, _x.action_goal.goal.engine_config.max_angular_velocity, _x.action_goal.goal.engine_config.max_acceleration, _x.action_goal.goal.engine_config.max_centripetal_acceleration, _x.action_goal.goal.engine_config.is_max_centripetal_acceleration, _x.action_goal.goal.engine_config.rotate_at_end, _x.action_goal.goal.engine_config.start_velocity, _x.action_goal.goal.engine_config.is_start_velocity, _x.action_goal.goal.engine_config.end_velocity, _x.action_goal.goal.engine_config.is_end_velocity, _x.action_goal.goal.xy_tolerance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2B4d2BdBdBd3I().unpack(bytes_[start:end])
      self.action_goal.goal.continuously_select_goal = bool(self.action_goal.goal.continuously_select_goal)
      self.action_goal.goal.overwrite_engine_config = bool(self.action_goal.goal.overwrite_engine_config)
      self.action_goal.goal.engine_config.is_max_centripetal_acceleration = bool(self.action_goal.goal.engine_config.is_max_centripetal_acceleration)
      self.action_goal.goal.engine_config.rotate_at_end = bool(self.action_goal.goal.engine_config.rotate_at_end)
      self.action_goal.goal.engine_config.is_start_velocity = bool(self.action_goal.goal.engine_config.is_start_velocity)
      self.action_goal.goal.engine_config.is_end_velocity = bool(self.action_goal.goal.engine_config.is_end_velocity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = bytes_[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = bytes_[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3I().unpack(bytes_[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = bytes_[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = bytes_[start:end]
      _x = self
      start = end
      end += 37
      (_x.action_feedback.feedback.is_done, _x.action_feedback.feedback.distance_to_goal, _x.action_feedback.feedback.time_left, _x.action_feedback.feedback.total_time, _x.action_feedback.feedback.trajectory.header.seq, _x.action_feedback.feedback.trajectory.header.stamp.secs, _x.action_feedback.feedback.trajectory.header.stamp.nsecs,) = _get_struct_B3d3I().unpack(bytes_[start:end])
      self.action_feedback.feedback.is_done = bool(self.action_feedback.feedback.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.trajectory.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.trajectory.header.frame_id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.action_feedback.feedback.trajectory.poses = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_PoseStamped()
        _v71 = val1.header
        start = end
        end += 4
        (_v71.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v72 = _v71.stamp
        _x = _v72
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v71.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v71.frame_id = bytes_[start:end]
        _v73 = val1.pose
        _v74 = _v73.position
        _x = _v74
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v75 = _v73.orientation
        _x = _v75
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        self.action_feedback.feedback.trajectory.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.action_feedback.feedback.trajectory.twists = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_TwistStamped()
        _v76 = val1.header
        start = end
        end += 4
        (_v76.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v77 = _v76.stamp
        _x = _v77
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v76.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v76.frame_id = bytes_[start:end]
        _v78 = val1.twist
        _v79 = _v78.linear
        _x = _v79
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v80 = _v78.angular
        _x = _v80
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        self.action_feedback.feedback.trajectory.twists.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.goal_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.goal.header.seq, _x.action_goal.goal.goal.header.stamp.secs, _x.action_goal.goal.goal.header.stamp.nsecs))
      _x = self.action_goal.goal.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.action_goal.goal.goal.pose.position.x, _x.action_goal.goal.goal.pose.position.y, _x.action_goal.goal.goal.pose.position.z, _x.action_goal.goal.goal.pose.orientation.x, _x.action_goal.goal.goal.pose.orientation.y, _x.action_goal.goal.goal.pose.orientation.z, _x.action_goal.goal.goal.pose.orientation.w))
      _x = self.action_goal.goal.target_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_goal.goal.strategy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B4d2BdBdBd3I().pack(_x.action_goal.goal.continuously_select_goal, _x.action_goal.goal.overwrite_engine_config, _x.action_goal.goal.engine_config.max_velocity, _x.action_goal.goal.engine_config.max_angular_velocity, _x.action_goal.goal.engine_config.max_acceleration, _x.action_goal.goal.engine_config.max_centripetal_acceleration, _x.action_goal.goal.engine_config.is_max_centripetal_acceleration, _x.action_goal.goal.engine_config.rotate_at_end, _x.action_goal.goal.engine_config.start_velocity, _x.action_goal.goal.engine_config.is_start_velocity, _x.action_goal.goal.engine_config.end_velocity, _x.action_goal.goal.engine_config.is_end_velocity, _x.action_goal.goal.xy_tolerance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_result.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3I().pack(_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.action_feedback.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3d3I().pack(_x.action_feedback.feedback.is_done, _x.action_feedback.feedback.distance_to_goal, _x.action_feedback.feedback.time_left, _x.action_feedback.feedback.total_time, _x.action_feedback.feedback.trajectory.header.seq, _x.action_feedback.feedback.trajectory.header.stamp.secs, _x.action_feedback.feedback.trajectory.header.stamp.nsecs))
      _x = self.action_feedback.feedback.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.action_feedback.feedback.trajectory.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.trajectory.poses:
        _v81 = val1.header
        _x = _v81.seq
        buff.write(_get_struct_I().pack(_x))
        _v82 = _v81.stamp
        _x = _v82
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v81.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v83 = val1.pose
        _v84 = _v83.position
        _x = _v84
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v85 = _v83.orientation
        _x = _v85
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_feedback.feedback.trajectory.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.trajectory.twists:
        _v86 = val1.header
        _x = _v86.seq
        buff.write(_get_struct_I().pack(_x))
        _v87 = _v86.stamp
        _x = _v87
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v86.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v88 = val1.twist
        _v89 = _v88.linear
        _x = _v89
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v90 = _v88.angular
        _x = _v90
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.action_goal is None:
        self.action_goal = bw_interfaces_msg_GoToGoalActionGoal()
      if self.action_result is None:
        self.action_result = bw_interfaces_msg_GoToGoalActionResult()
      if self.action_feedback is None:
        self.action_feedback = bw_interfaces_msg_GoToGoalActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal_id.id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.goal_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.goal_type = bytes_[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.goal.header.seq, _x.action_goal.goal.goal.header.stamp.secs, _x.action_goal.goal.goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 56
      (_x.action_goal.goal.goal.pose.position.x, _x.action_goal.goal.goal.pose.position.y, _x.action_goal.goal.goal.pose.position.z, _x.action_goal.goal.goal.pose.orientation.x, _x.action_goal.goal.goal.pose.orientation.y, _x.action_goal.goal.goal.pose.orientation.z, _x.action_goal.goal.goal.pose.orientation.w,) = _get_struct_7d().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.target_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.target_type = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.strategy = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_goal.goal.strategy = bytes_[start:end]
      _x = self
      start = end
      end += 74
      (_x.action_goal.goal.continuously_select_goal, _x.action_goal.goal.overwrite_engine_config, _x.action_goal.goal.engine_config.max_velocity, _x.action_goal.goal.engine_config.max_angular_velocity, _x.action_goal.goal.engine_config.max_acceleration, _x.action_goal.goal.engine_config.max_centripetal_acceleration, _x.action_goal.goal.engine_config.is_max_centripetal_acceleration, _x.action_goal.goal.engine_config.rotate_at_end, _x.action_goal.goal.engine_config.start_velocity, _x.action_goal.goal.engine_config.is_start_velocity, _x.action_goal.goal.engine_config.end_velocity, _x.action_goal.goal.engine_config.is_end_velocity, _x.action_goal.goal.xy_tolerance, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_2B4d2BdBdBd3I().unpack(bytes_[start:end])
      self.action_goal.goal.continuously_select_goal = bool(self.action_goal.goal.continuously_select_goal)
      self.action_goal.goal.overwrite_engine_config = bool(self.action_goal.goal.overwrite_engine_config)
      self.action_goal.goal.engine_config.is_max_centripetal_acceleration = bool(self.action_goal.goal.engine_config.is_max_centripetal_acceleration)
      self.action_goal.goal.engine_config.rotate_at_end = bool(self.action_goal.goal.engine_config.rotate_at_end)
      self.action_goal.goal.engine_config.is_start_velocity = bool(self.action_goal.goal.engine_config.is_start_velocity)
      self.action_goal.goal.engine_config.is_end_velocity = bool(self.action_goal.goal.engine_config.is_end_velocity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.goal_id.id = bytes_[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_result.status.text = bytes_[start:end]
      _x = self
      start = end
      end += 13
      (_x.action_result.result.success, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_B3I().unpack(bytes_[start:end])
      self.action_result.result.success = bool(self.action_result.result.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.goal_id.id = bytes_[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.status.text = bytes_[start:end]
      _x = self
      start = end
      end += 37
      (_x.action_feedback.feedback.is_done, _x.action_feedback.feedback.distance_to_goal, _x.action_feedback.feedback.time_left, _x.action_feedback.feedback.total_time, _x.action_feedback.feedback.trajectory.header.seq, _x.action_feedback.feedback.trajectory.header.stamp.secs, _x.action_feedback.feedback.trajectory.header.stamp.nsecs,) = _get_struct_B3d3I().unpack(bytes_[start:end])
      self.action_feedback.feedback.is_done = bool(self.action_feedback.feedback.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.trajectory.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.action_feedback.feedback.trajectory.header.frame_id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.action_feedback.feedback.trajectory.poses = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_PoseStamped()
        _v91 = val1.header
        start = end
        end += 4
        (_v91.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v91.frame_id = bytes_[start:end]
        _v93 = val1.pose
        _v94 = _v93.position
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v95 = _v93.orientation
        _x = _v95
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        self.action_feedback.feedback.trajectory.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.action_feedback.feedback.trajectory.twists = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_TwistStamped()
        _v96 = val1.header
        start = end
        end += 4
        (_v96.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v97 = _v96.stamp
        _x = _v97
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v96.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v96.frame_id = bytes_[start:end]
        _v98 = val1.twist
        _v99 = _v98.linear
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v100 = _v98.angular
        _x = _v100
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        self.action_feedback.feedback.trajectory.twists.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B4d2BdBdBd3I = None
def _get_struct_2B4d2BdBdBd3I():
    global _struct_2B4d2BdBdBd3I
    if _struct_2B4d2BdBdBd3I is None:
        _struct_2B4d2BdBdBd3I = struct.Struct("<2B4d2BdBdBd3I")
    return _struct_2B4d2BdBdBd3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B3I = None
def _get_struct_B3I():
    global _struct_B3I
    if _struct_B3I is None:
        _struct_B3I = struct.Struct("<B3I")
    return _struct_B3I
_struct_B3d3I = None
def _get_struct_B3d3I():
    global _struct_B3d3I
    if _struct_B3d3I is None:
        _struct_B3d3I = struct.Struct("<B3d3I")
    return _struct_B3d3I

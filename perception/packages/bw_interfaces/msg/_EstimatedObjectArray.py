# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/EstimatedObjectArray.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from bw_interfaces.msg._EstimatedObject import EstimatedObject as bw_interfaces_msg_EstimatedObject
from geometry_msgs.msg._Point import Point as geometry_msgs_msg_Point
from geometry_msgs.msg._Pose import Pose as geometry_msgs_msg_Pose
from geometry_msgs.msg._PoseWithCovariance import PoseWithCovariance as geometry_msgs_msg_PoseWithCovariance
from geometry_msgs.msg._Quaternion import Quaternion as geometry_msgs_msg_Quaternion
from geometry_msgs.msg._Twist import Twist as geometry_msgs_msg_Twist
from geometry_msgs.msg._TwistWithCovariance import TwistWithCovariance as geometry_msgs_msg_TwistWithCovariance
from geometry_msgs.msg._Vector3 import Vector3 as geometry_msgs_msg_Vector3
from std_msgs.msg._Header import Header as std_msgs_msg_Header

class EstimatedObjectArray(genpy.Message):
  _md5sum: str = "80de586de9416cd2b6e67a380556ce78"
  _type: str = "bw_interfaces/EstimatedObjectArray"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """bw_interfaces/EstimatedObject[] robots

================================================================================
MSG: bw_interfaces/EstimatedObject
std_msgs/Header header
string child_frame_id
geometry_msgs/PoseWithCovariance pose
geometry_msgs/TwistWithCovariance twist
geometry_msgs/Vector3 size
string label
geometry_msgs/Pose[] keypoints
string[] keypoint_names
float64 score

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertainty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__: List[str] = ['robots']
  _slot_types: List[str] = ['bw_interfaces/EstimatedObject[]']

  def __init__(self, robots: List[bw_interfaces_msg_EstimatedObject] = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      robots

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(EstimatedObjectArray, self).__init__(**{'robots': robots})
    if self.robots is None:
      self.robots: List[bw_interfaces_msg_EstimatedObject] = []
    else:
      self.robots = robots

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      length = len(self.robots)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots:
        _v9 = val1.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v11 = val1.pose
        _v12 = _v11.pose
        _v13 = _v12.position
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = _v12.orientation
        _x = _v14
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_get_struct_36d().pack(*_v11.covariance))
        _v15 = val1.twist
        _v16 = _v15.twist
        _v17 = _v16.linear
        _x = _v17
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v18 = _v16.angular
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_get_struct_36d().pack(*_v15.covariance))
        _v19 = val1.size
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.keypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.keypoints:
          _v20 = val2.position
          _x = _v20
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v21 = val2.orientation
          _x = _v21
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.keypoint_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.keypoint_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'EstimatedObjectArray':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robots is None:
        self.robots = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.robots = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_EstimatedObject()
        _v22 = val1.header
        start = end
        end += 4
        (_v22.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v23 = _v22.stamp
        _x = _v23
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v22.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v22.frame_id = bytes_[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = bytes_[start:end]
        _v24 = val1.pose
        _v25 = _v24.pose
        _v26 = _v25.position
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v27 = _v25.orientation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        start = end
        end += 288
        _v24.covariance = _get_struct_36d().unpack(bytes_[start:end])
        _v28 = val1.twist
        _v29 = _v28.twist
        _v30 = _v29.linear
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v31 = _v29.angular
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        start = end
        end += 288
        _v28.covariance = _get_struct_36d().unpack(bytes_[start:end])
        _v32 = val1.size
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1.label = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = bytes_[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        val1.keypoints = []
        for i in range(0, length):
          val2 = geometry_msgs_msg_Pose()
          _v33 = val2.position
          _x = _v33
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
          _v34 = val2.orientation
          _x = _v34
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
          val1.keypoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        val1.keypoint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(bytes_[start:end])
          start = end
          end += length
          if python3:
            val2 = bytes_[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = bytes_[start:end]
          val1.keypoint_names.append(val2)
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(bytes_[start:end])
        self.robots.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.robots)
      buff.write(_struct_I.pack(length))
      for val1 in self.robots:
        _v35 = val1.header
        _x = _v35.seq
        buff.write(_get_struct_I().pack(_x))
        _v36 = _v35.stamp
        _x = _v36
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v35.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v37 = val1.pose
        _v38 = _v37.pose
        _v39 = _v38.position
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v40 = _v38.orientation
        _x = _v40
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_v37.covariance.tostring())
        _v41 = val1.twist
        _v42 = _v41.twist
        _v43 = _v42.linear
        _x = _v43
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v44 = _v42.angular
        _x = _v44
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        buff.write(_v41.covariance.tostring())
        _v45 = val1.size
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.label
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.keypoints)
        buff.write(_struct_I.pack(length))
        for val2 in val1.keypoints:
          _v46 = val2.position
          _x = _v46
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v47 = val2.orientation
          _x = _v47
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.keypoint_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.keypoint_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.Struct('<I%ss'%length).pack(length, val2))
        _x = val1.score
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robots is None:
        self.robots = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.robots = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_EstimatedObject()
        _v48 = val1.header
        start = end
        end += 4
        (_v48.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v49 = _v48.stamp
        _x = _v49
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v48.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v48.frame_id = bytes_[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.child_frame_id = bytes_[start:end]
        _v50 = val1.pose
        _v51 = _v50.pose
        _v52 = _v51.position
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v53 = _v51.orientation
        _x = _v53
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        start = end
        end += 288
        _v50.covariance = numpy.frombuffer(bytes_[start:end], dtype=numpy.float64, count=36)
        _v54 = val1.twist
        _v55 = _v54.twist
        _v56 = _v55.linear
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v57 = _v55.angular
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        start = end
        end += 288
        _v54.covariance = numpy.frombuffer(bytes_[start:end], dtype=numpy.float64, count=36)
        _v58 = val1.size
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1.label = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.label = bytes_[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        val1.keypoints = []
        for i in range(0, length):
          val2 = geometry_msgs_msg_Pose()
          _v59 = val2.position
          _x = _v59
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
          _v60 = val2.orientation
          _x = _v60
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
          val1.keypoints.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        val1.keypoint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(bytes_[start:end])
          start = end
          end += length
          if python3:
            val2 = bytes_[start:end].decode('utf-8', 'rosmsg')
          else:
            val2 = bytes_[start:end]
          val1.keypoint_names.append(val2)
        start = end
        end += 8
        (val1.score,) = _get_struct_d().unpack(bytes_[start:end])
        self.robots.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/GoToGoalGoal.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from bw_interfaces.msg._GoalEngineConfig import GoalEngineConfig as bw_interfaces_msg_GoalEngineConfig
from geometry_msgs.msg._Point import Point as geometry_msgs_msg_Point
from geometry_msgs.msg._Pose import Pose as geometry_msgs_msg_Pose
from geometry_msgs.msg._PoseStamped import PoseStamped as geometry_msgs_msg_PoseStamped
from geometry_msgs.msg._Quaternion import Quaternion as geometry_msgs_msg_Quaternion
from std_msgs.msg._Header import Header as std_msgs_msg_Header

class GoToGoalGoal(genpy.Message):
  _md5sum: str = "8b39d8506a4b9ae3969d12e9222358d0"
  _type: str = "bw_interfaces/GoToGoalGoal"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """string goal_type
geometry_msgs/PoseStamped goal
string target_type
string strategy
bool continuously_select_goal
bool overwrite_engine_config
bw_interfaces/GoalEngineConfig engine_config
float64 xy_tolerance
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: bw_interfaces/GoalEngineConfig
float64 max_velocity
float64 max_angular_velocity
float64 max_acceleration
float64 max_centripetal_acceleration
bool is_max_centripetal_acceleration
bool rotate_at_end
float64 start_velocity
bool is_start_velocity
float64 end_velocity
bool is_end_velocity
"""
  __slots__: List[str] = ['goal_type','goal','target_type','strategy','continuously_select_goal','overwrite_engine_config','engine_config','xy_tolerance']
  _slot_types: List[str] = ['string','geometry_msgs/PoseStamped','string','string','bool','bool','bw_interfaces/GoalEngineConfig','float64']

  def __init__(self, goal_type: str = None,
    goal: geometry_msgs_msg_PoseStamped = None,
    target_type: str = None,
    strategy: str = None,
    continuously_select_goal: bool = None,
    overwrite_engine_config: bool = None,
    engine_config: bw_interfaces_msg_GoalEngineConfig = None,
    xy_tolerance: float = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      goal_type,goal,target_type,strategy,continuously_select_goal,overwrite_engine_config,engine_config,xy_tolerance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(GoToGoalGoal, self).__init__(**{'goal_type': goal_type, 'goal': goal, 'target_type': target_type, 'strategy': strategy, 'continuously_select_goal': continuously_select_goal, 'overwrite_engine_config': overwrite_engine_config, 'engine_config': engine_config, 'xy_tolerance': xy_tolerance})
    if self.goal_type is None:
      self.goal_type: str = ''
    else:
      self.goal_type = goal_type
    if self.goal is None:
      self.goal: geometry_msgs_msg_PoseStamped = geometry_msgs_msg_PoseStamped()
    else:
      self.goal = goal
    if self.target_type is None:
      self.target_type: str = ''
    else:
      self.target_type = target_type
    if self.strategy is None:
      self.strategy: str = ''
    else:
      self.strategy = strategy
    if self.continuously_select_goal is None:
      self.continuously_select_goal: bool = False
    else:
      self.continuously_select_goal = continuously_select_goal
    if self.overwrite_engine_config is None:
      self.overwrite_engine_config: bool = False
    else:
      self.overwrite_engine_config = overwrite_engine_config
    if self.engine_config is None:
      self.engine_config: bw_interfaces_msg_GoalEngineConfig = bw_interfaces_msg_GoalEngineConfig()
    else:
      self.engine_config = engine_config
    if self.xy_tolerance is None:
      self.xy_tolerance: float = 0.
    else:
      self.xy_tolerance = xy_tolerance

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self.goal_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w))
      _x = self.target_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.strategy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B4d2BdBdBd().pack(_x.continuously_select_goal, _x.overwrite_engine_config, _x.engine_config.max_velocity, _x.engine_config.max_angular_velocity, _x.engine_config.max_acceleration, _x.engine_config.max_centripetal_acceleration, _x.engine_config.is_max_centripetal_acceleration, _x.engine_config.rotate_at_end, _x.engine_config.start_velocity, _x.engine_config.is_start_velocity, _x.engine_config.end_velocity, _x.engine_config.is_end_velocity, _x.xy_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'GoToGoalGoal':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal is None:
        self.goal = geometry_msgs_msg_PoseStamped()
      if self.engine_config is None:
        self.engine_config = bw_interfaces_msg_GoalEngineConfig()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal_type = bytes_[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w,) = _get_struct_7d().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.target_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_type = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.strategy = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.strategy = bytes_[start:end]
      _x = self
      start = end
      end += 62
      (_x.continuously_select_goal, _x.overwrite_engine_config, _x.engine_config.max_velocity, _x.engine_config.max_angular_velocity, _x.engine_config.max_acceleration, _x.engine_config.max_centripetal_acceleration, _x.engine_config.is_max_centripetal_acceleration, _x.engine_config.rotate_at_end, _x.engine_config.start_velocity, _x.engine_config.is_start_velocity, _x.engine_config.end_velocity, _x.engine_config.is_end_velocity, _x.xy_tolerance,) = _get_struct_2B4d2BdBdBd().unpack(bytes_[start:end])
      self.continuously_select_goal = bool(self.continuously_select_goal)
      self.overwrite_engine_config = bool(self.overwrite_engine_config)
      self.engine_config.is_max_centripetal_acceleration = bool(self.engine_config.is_max_centripetal_acceleration)
      self.engine_config.rotate_at_end = bool(self.engine_config.rotate_at_end)
      self.engine_config.is_start_velocity = bool(self.engine_config.is_start_velocity)
      self.engine_config.is_end_velocity = bool(self.engine_config.is_end_velocity)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.goal_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w))
      _x = self.target_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.strategy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B4d2BdBdBd().pack(_x.continuously_select_goal, _x.overwrite_engine_config, _x.engine_config.max_velocity, _x.engine_config.max_angular_velocity, _x.engine_config.max_acceleration, _x.engine_config.max_centripetal_acceleration, _x.engine_config.is_max_centripetal_acceleration, _x.engine_config.rotate_at_end, _x.engine_config.start_velocity, _x.engine_config.is_start_velocity, _x.engine_config.end_velocity, _x.engine_config.is_end_velocity, _x.xy_tolerance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.goal is None:
        self.goal = geometry_msgs_msg_PoseStamped()
      if self.engine_config is None:
        self.engine_config = bw_interfaces_msg_GoalEngineConfig()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal_type = bytes_[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.goal.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w,) = _get_struct_7d().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.target_type = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.target_type = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.strategy = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.strategy = bytes_[start:end]
      _x = self
      start = end
      end += 62
      (_x.continuously_select_goal, _x.overwrite_engine_config, _x.engine_config.max_velocity, _x.engine_config.max_angular_velocity, _x.engine_config.max_acceleration, _x.engine_config.max_centripetal_acceleration, _x.engine_config.is_max_centripetal_acceleration, _x.engine_config.rotate_at_end, _x.engine_config.start_velocity, _x.engine_config.is_start_velocity, _x.engine_config.end_velocity, _x.engine_config.is_end_velocity, _x.xy_tolerance,) = _get_struct_2B4d2BdBdBd().unpack(bytes_[start:end])
      self.continuously_select_goal = bool(self.continuously_select_goal)
      self.overwrite_engine_config = bool(self.overwrite_engine_config)
      self.engine_config.is_max_centripetal_acceleration = bool(self.engine_config.is_max_centripetal_acceleration)
      self.engine_config.rotate_at_end = bool(self.engine_config.rotate_at_end)
      self.engine_config.is_start_velocity = bool(self.engine_config.is_start_velocity)
      self.engine_config.is_end_velocity = bool(self.engine_config.is_end_velocity)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B4d2BdBdBd = None
def _get_struct_2B4d2BdBdBd():
    global _struct_2B4d2BdBdBd
    if _struct_2B4d2BdBdBd is None:
        _struct_2B4d2BdBdBd = struct.Struct("<2B4d2BdBdBd")
    return _struct_2B4d2BdBdBd
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/GoToGoalActionFeedback.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from actionlib_msgs.msg._GoalID import GoalID as actionlib_msgs_msg_GoalID
from actionlib_msgs.msg._GoalStatus import GoalStatus as actionlib_msgs_msg_GoalStatus
from bw_interfaces.msg._GoToGoalFeedback import GoToGoalFeedback as bw_interfaces_msg_GoToGoalFeedback
from bw_interfaces.msg._Trajectory import Trajectory as bw_interfaces_msg_Trajectory
from geometry_msgs.msg._Point import Point as geometry_msgs_msg_Point
from geometry_msgs.msg._Pose import Pose as geometry_msgs_msg_Pose
from geometry_msgs.msg._PoseStamped import PoseStamped as geometry_msgs_msg_PoseStamped
from geometry_msgs.msg._Quaternion import Quaternion as geometry_msgs_msg_Quaternion
from geometry_msgs.msg._Twist import Twist as geometry_msgs_msg_Twist
from geometry_msgs.msg._TwistStamped import TwistStamped as geometry_msgs_msg_TwistStamped
from geometry_msgs.msg._Vector3 import Vector3 as geometry_msgs_msg_Vector3
from std_msgs.msg._Header import Header as std_msgs_msg_Header
import genpy

class GoToGoalActionFeedback(genpy.Message):
  _md5sum: str = "0c3a7abcc9187b9352a65aa5c3fde7c1"
  _type: str = "bw_interfaces/GoToGoalActionFeedback"
  _has_header: bool = True  # flag to mark the presence of a Header object
  _full_text: str = """Header header
actionlib_msgs/GoalStatus status
GoToGoalFeedback feedback

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: bw_interfaces/GoToGoalFeedback
bool is_done
float64 distance_to_goal
float64 time_left
float64 total_time
bw_interfaces/Trajectory trajectory

================================================================================
MSG: bw_interfaces/Trajectory
Header header
geometry_msgs/PoseStamped[] poses
geometry_msgs/TwistStamped[] twists

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistStamped
# A twist with reference coordinate frame and timestamp
Header header
Twist twist

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__: List[str] = ['header','status','feedback']
  _slot_types: List[str] = ['std_msgs/Header','actionlib_msgs/GoalStatus','bw_interfaces/GoToGoalFeedback']

  def __init__(self, header: std_msgs_msg_Header = None,
    status: actionlib_msgs_msg_GoalStatus = None,
    feedback: bw_interfaces_msg_GoToGoalFeedback = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      header,status,feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(GoToGoalActionFeedback, self).__init__(**{'header': header, 'status': status, 'feedback': feedback})
    if self.header is None:
      self.header: std_msgs_msg_Header = std_msgs_msg_Header()
    else:
      self.header = header
    if self.status is None:
      self.status: actionlib_msgs_msg_GoalStatus = actionlib_msgs_msg_GoalStatus()
    else:
      self.status = status
    if self.feedback is None:
      self.feedback: bw_interfaces_msg_GoToGoalFeedback = bw_interfaces_msg_GoToGoalFeedback()
    else:
      self.feedback = feedback

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3d3I().pack(_x.feedback.is_done, _x.feedback.distance_to_goal, _x.feedback.time_left, _x.feedback.total_time, _x.feedback.trajectory.header.seq, _x.feedback.trajectory.header.stamp.secs, _x.feedback.trajectory.header.stamp.nsecs))
      _x = self.feedback.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.feedback.trajectory.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.feedback.trajectory.poses:
        _v101 = val1.header
        _x = _v101.seq
        buff.write(_get_struct_I().pack(_x))
        _v102 = _v101.stamp
        _x = _v102
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v101.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v103 = val1.pose
        _v104 = _v103.position
        _x = _v104
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v105 = _v103.orientation
        _x = _v105
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.feedback.trajectory.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.feedback.trajectory.twists:
        _v106 = val1.header
        _x = _v106.seq
        buff.write(_get_struct_I().pack(_x))
        _v107 = _v106.stamp
        _x = _v107
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v106.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v108 = val1.twist
        _v109 = _v108.linear
        _x = _v109
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v110 = _v108.angular
        _x = _v110
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'GoToGoalActionFeedback':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs_msg_Header()
      if self.status is None:
        self.status = actionlib_msgs_msg_GoalStatus()
      if self.feedback is None:
        self.feedback = bw_interfaces_msg_GoToGoalFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.goal_id.id = bytes_[start:end]
      start = end
      end += 1
      (self.status.status,) = _get_struct_B().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.status.text = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.text = bytes_[start:end]
      _x = self
      start = end
      end += 37
      (_x.feedback.is_done, _x.feedback.distance_to_goal, _x.feedback.time_left, _x.feedback.total_time, _x.feedback.trajectory.header.seq, _x.feedback.trajectory.header.stamp.secs, _x.feedback.trajectory.header.stamp.nsecs,) = _get_struct_B3d3I().unpack(bytes_[start:end])
      self.feedback.is_done = bool(self.feedback.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.feedback.trajectory.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.trajectory.header.frame_id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.feedback.trajectory.poses = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_PoseStamped()
        _v111 = val1.header
        start = end
        end += 4
        (_v111.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v112 = _v111.stamp
        _x = _v112
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v111.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v111.frame_id = bytes_[start:end]
        _v113 = val1.pose
        _v114 = _v113.position
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v115 = _v113.orientation
        _x = _v115
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        self.feedback.trajectory.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.feedback.trajectory.twists = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_TwistStamped()
        _v116 = val1.header
        start = end
        end += 4
        (_v116.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v117 = _v116.stamp
        _x = _v117
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v116.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v116.frame_id = bytes_[start:end]
        _v118 = val1.twist
        _v119 = _v118.linear
        _x = _v119
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v120 = _v118.angular
        _x = _v120
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        self.feedback.trajectory.twists.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.status.status
      buff.write(_get_struct_B().pack(_x))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B3d3I().pack(_x.feedback.is_done, _x.feedback.distance_to_goal, _x.feedback.time_left, _x.feedback.total_time, _x.feedback.trajectory.header.seq, _x.feedback.trajectory.header.stamp.secs, _x.feedback.trajectory.header.stamp.nsecs))
      _x = self.feedback.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.feedback.trajectory.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.feedback.trajectory.poses:
        _v121 = val1.header
        _x = _v121.seq
        buff.write(_get_struct_I().pack(_x))
        _v122 = _v121.stamp
        _x = _v122
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v121.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v123 = val1.pose
        _v124 = _v123.position
        _x = _v124
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v125 = _v123.orientation
        _x = _v125
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.feedback.trajectory.twists)
      buff.write(_struct_I.pack(length))
      for val1 in self.feedback.trajectory.twists:
        _v126 = val1.header
        _x = _v126.seq
        buff.write(_get_struct_I().pack(_x))
        _v127 = _v126.stamp
        _x = _v127
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v126.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v128 = val1.twist
        _v129 = _v128.linear
        _x = _v129
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v130 = _v128.angular
        _x = _v130
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs_msg_Header()
      if self.status is None:
        self.status = actionlib_msgs_msg_GoalStatus()
      if self.feedback is None:
        self.feedback = bw_interfaces_msg_GoToGoalFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = bytes_[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.goal_id.id = bytes_[start:end]
      start = end
      end += 1
      (self.status.status,) = _get_struct_B().unpack(bytes_[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.status.text = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.status.text = bytes_[start:end]
      _x = self
      start = end
      end += 37
      (_x.feedback.is_done, _x.feedback.distance_to_goal, _x.feedback.time_left, _x.feedback.total_time, _x.feedback.trajectory.header.seq, _x.feedback.trajectory.header.stamp.secs, _x.feedback.trajectory.header.stamp.nsecs,) = _get_struct_B3d3I().unpack(bytes_[start:end])
      self.feedback.is_done = bool(self.feedback.is_done)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      start = end
      end += length
      if python3:
        self.feedback.trajectory.header.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
      else:
        self.feedback.trajectory.header.frame_id = bytes_[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.feedback.trajectory.poses = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_PoseStamped()
        _v131 = val1.header
        start = end
        end += 4
        (_v131.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v132 = _v131.stamp
        _x = _v132
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v131.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v131.frame_id = bytes_[start:end]
        _v133 = val1.pose
        _v134 = _v133.position
        _x = _v134
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v135 = _v133.orientation
        _x = _v135
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(bytes_[start:end])
        self.feedback.trajectory.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.feedback.trajectory.twists = []
      for i in range(0, length):
        val1 = geometry_msgs_msg_TwistStamped()
        _v136 = val1.header
        start = end
        end += 4
        (_v136.seq,) = _get_struct_I().unpack(bytes_[start:end])
        _v137 = _v136.stamp
        _x = _v137
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(bytes_[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          _v136.frame_id = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          _v136.frame_id = bytes_[start:end]
        _v138 = val1.twist
        _v139 = _v138.linear
        _x = _v139
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        _v140 = _v138.angular
        _x = _v140
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(bytes_[start:end])
        self.feedback.trajectory.twists.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_B3d3I = None
def _get_struct_B3d3I():
    global _struct_B3d3I
    if _struct_B3d3I is None:
        _struct_B3d3I = struct.Struct("<B3d3I")
    return _struct_B3d3I

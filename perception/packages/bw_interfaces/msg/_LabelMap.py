# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/LabelMap.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy

class LabelMap(genpy.Message):
  _md5sum: str = "5db8c50d28f63f0a114e40bdc138cecf"
  _type: str = "bw_interfaces/LabelMap"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """string[] model_labels
string[] system_labels
"""
  __slots__: List[str] = ['model_labels','system_labels']
  _slot_types: List[str] = ['string[]','string[]']

  def __init__(self, model_labels: List[str] = None,
    system_labels: List[str] = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      model_labels,system_labels

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(LabelMap, self).__init__(**{'model_labels': model_labels, 'system_labels': system_labels})
    if self.model_labels is None:
      self.model_labels: List[str] = []
    else:
      self.model_labels = model_labels
    if self.system_labels is None:
      self.system_labels: List[str] = []
    else:
      self.system_labels = system_labels

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      length = len(self.model_labels)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_labels:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.system_labels)
      buff.write(_struct_I.pack(length))
      for val1 in self.system_labels:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'LabelMap':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.model_labels = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1 = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = bytes_[start:end]
        self.model_labels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.system_labels = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1 = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = bytes_[start:end]
        self.system_labels.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.model_labels)
      buff.write(_struct_I.pack(length))
      for val1 in self.model_labels:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.system_labels)
      buff.write(_struct_I.pack(length))
      for val1 in self.system_labels:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.model_labels = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1 = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = bytes_[start:end]
        self.model_labels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.system_labels = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(bytes_[start:end])
        start = end
        end += length
        if python3:
          val1 = bytes_[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = bytes_[start:end]
        self.system_labels.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/Contour.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy
from bw_interfaces.msg._UVKeypoint import UVKeypoint as bw_interfaces_msg_UVKeypoint

class Contour(genpy.Message):
  _md5sum: str = "165b17a8d32c9dacaa5cb11c6170e56d"
  _type: str = "bw_interfaces/Contour"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """bw_interfaces/UVKeypoint[] points
float64 area
================================================================================
MSG: bw_interfaces/UVKeypoint
float32 x
float32 y
"""
  __slots__: List[str] = ['points','area']
  _slot_types: List[str] = ['bw_interfaces/UVKeypoint[]','float64']

  def __init__(self, points: List[bw_interfaces_msg_UVKeypoint] = None,
    area: float = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      points,area

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(Contour, self).__init__(**{'points': points, 'area': area})
    if self.points is None:
      self.points: List[bw_interfaces_msg_UVKeypoint] = []
    else:
      self.points = points
    if self.area is None:
      self.area: float = 0.
    else:
      self.area = area

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self.area
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'Contour':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.points = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_UVKeypoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(bytes_[start:end])
        self.points.append(val1)
      start = end
      end += 8
      (self.area,) = _get_struct_d().unpack(bytes_[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
      _x = self.area
      buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.points is None:
        self.points = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(bytes_[start:end])
      self.points = []
      for i in range(0, length):
        val1 = bw_interfaces_msg_UVKeypoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(bytes_[start:end])
        self.points.append(val1)
      start = end
      end += 8
      (self.area,) = _get_struct_d().unpack(bytes_[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bw_interfaces/VelocityProfile.msg. Do not edit."""
import codecs
import sys
from io import BytesIO
from typing import List, Tuple, Optional
python3 = True if sys.hexversion > 0x03000000 else False
import struct
import genpy

class VelocityProfile(genpy.Message):
  _md5sum: str = "8a7b1d4db9dc5f8dc3c48248a23a3f29"
  _type: str = "bw_interfaces/VelocityProfile"
  _has_header: bool = False  # flag to mark the presence of a Header object
  _full_text: str = """float64 max_velocity
float64 max_angular_velocity
float64 max_acceleration
float64 max_centripetal_acceleration
"""
  __slots__: List[str] = ['max_velocity','max_angular_velocity','max_acceleration','max_centripetal_acceleration']
  _slot_types: List[str] = ['float64','float64','float64','float64']

  def __init__(self, max_velocity: float = None,
    max_angular_velocity: float = None,
    max_acceleration: float = None,
    max_centripetal_acceleration: float = None):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
      max_velocity,max_angular_velocity,max_acceleration,max_centripetal_acceleration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    super(VelocityProfile, self).__init__(**{'max_velocity': max_velocity, 'max_angular_velocity': max_angular_velocity, 'max_acceleration': max_acceleration, 'max_centripetal_acceleration': max_centripetal_acceleration})
    if self.max_velocity is None:
      self.max_velocity: float = 0.
    else:
      self.max_velocity = max_velocity
    if self.max_angular_velocity is None:
      self.max_angular_velocity: float = 0.
    else:
      self.max_angular_velocity = max_angular_velocity
    if self.max_acceleration is None:
      self.max_acceleration: float = 0.
    else:
      self.max_acceleration = max_acceleration
    if self.max_centripetal_acceleration is None:
      self.max_centripetal_acceleration: float = 0.
    else:
      self.max_centripetal_acceleration = max_centripetal_acceleration

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff: BytesIO) -> None:
    """
    serialize message into buffer
    :param buff: buffer, ``BytesIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.max_velocity, _x.max_angular_velocity, _x.max_acceleration, _x.max_centripetal_acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, bytes_: bytes) -> 'VelocityProfile':
    """
    unpack serialized message in str into this message instance
    :param bytes_: byte array of serialized message, ``bytes``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.max_velocity, _x.max_angular_velocity, _x.max_acceleration, _x.max_centripetal_acceleration,) = _get_struct_4d().unpack(bytes_[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``BytesIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d().pack(_x.max_velocity, _x.max_angular_velocity, _x.max_acceleration, _x.max_centripetal_acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.max_velocity, _x.max_angular_velocity, _x.max_acceleration, _x.max_centripetal_acceleration,) = _get_struct_4d().unpack(bytes_[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
